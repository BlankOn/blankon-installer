/* libsoup-2.4.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Soup", lower_case_cprefix = "soup_")]
namespace Soup {
	[CCode (cprefix = "SoupForm", lower_case_cprefix = "soup_form_")]
	namespace Form {
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static GLib.HashTable<string,string> decode (string encoded_form);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static GLib.HashTable<string,string> decode_multipart (Soup.Message msg, string file_control_name, out string filename, out string content_type, out Soup.Buffer file);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static string encode (...);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static string encode_datalist (void* form_data_set);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static string encode_hash (GLib.HashTable<string,string> form_data_set);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static Soup.Message request_new (string method, string uri, ...);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static Soup.Message request_new_from_datalist (string method, string uri, void* form_data_set);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static Soup.Message request_new_from_hash (string method, string uri, GLib.HashTable<string,string> form_data_set);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static Soup.Message request_new_from_multipart (string uri, Soup.Multipart multipart);
	}
	[CCode (cprefix = "SoupXMLRPC", lower_case_cprefix = "soup_xmlrpc_")]
	namespace XMLRPC {
		[CCode (cprefix = "SOUP_XMLRPC_ERROR_", cheader_filename = "libsoup/soup.h")]
		public errordomain Error {
			ARGUMENTS,
			RETVAL,
		}
		[CCode (cprefix = "SOUP_XMLRPC_FAULT_", cheader_filename = "libsoup/soup.h")]
		public errordomain Fault {
			PARSE_ERROR_NOT_WELL_FORMED,
			PARSE_ERROR_UNSUPPORTED_ENCODING,
			PARSE_ERROR_INVALID_CHARACTER_FOR_ENCODING,
			SERVER_ERROR_INVALID_XML_RPC,
			SERVER_ERROR_REQUESTED_METHOD_NOT_FOUND,
			SERVER_ERROR_INVALID_METHOD_PARAMETERS,
			SERVER_ERROR_INTERNAL_XML_RPC_ERROR,
			APPLICATION_ERROR,
			SYSTEM_ERROR,
			TRANSPORT_ERROR,
		}
		[PrintfFormat]
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static unowned string build_fault (int fault_code, string fault_format, ...);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static unowned string build_method_call (string method_name, GLib.Value[] @params);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static unowned string build_method_response (GLib.Value value);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static GLib.Quark error_quark ();
		[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
		public static bool extract_method_call (string method_call, int length, out unowned string method_name, ...);
		[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
		public static bool extract_method_response (string method_response, int length, ...) throws Soup.XMLRPC.Fault;
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static GLib.Quark fault_quark ();
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static bool parse_method_call (string method_call, int length, out unowned string method_name, out unowned GLib.ValueArray @params);
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static bool parse_method_response (string method_response, int length, GLib.Value value) throws Soup.XMLRPC.Fault;
		[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
		public static unowned Soup.Message request_new (string uri, string method_name, ...);
		[PrintfFormat]
		[CCode (cheader_filename = "libsoup/soup.h")]
		public static void set_fault (Soup.Message msg, int fault_code, string fault_format, ...);
		[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
		public static void set_response (Soup.Message msg, ...);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Address : GLib.Object {
		[CCode (has_construct_function = false)]
		public Address (string name, uint port);
		[CCode (has_construct_function = false)]
		public Address.any (Soup.AddressFamily family, uint port);
		public static bool equal_by_ip ([CCode (type = "void*")] Soup.Address addr1, [CCode (type = "void*")] Soup.Address addr2);
		public static bool equal_by_name ([CCode (type = "void*")] Soup.Address addr1, [CCode (type = "void*")] Soup.Address addr2);
		[CCode (has_construct_function = false)]
		public Address.from_sockaddr (void* sa, int len);
		public unowned string get_name ();
		public unowned string get_physical ();
		public uint get_port ();
		public void* get_sockaddr (int len);
		public static uint hash_by_ip (void* addr);
		public static uint hash_by_name (void* addr);
		public bool is_resolved ();
		public void resolve_async (GLib.MainContext async_context, GLib.Cancellable cancellable, Soup.AddressCallback callback);
		public uint resolve_sync (GLib.Cancellable cancellable);
		[NoAccessorMethod]
		public Soup.AddressFamily family { get; construct; }
		public string name { get; construct; }
		public string physical { get; }
		public int port { get; construct; }
		public void* sockaddr { get; construct; }
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Auth : GLib.Object {
		[CCode (has_construct_function = false)]
		public Auth (GLib.Type type, Soup.Message msg, string auth_header);
		public virtual void authenticate (string username, string password);
		public virtual unowned string get_authorization (Soup.Message msg);
		public unowned string get_host ();
		public unowned string get_info ();
		public virtual GLib.SList<string> get_protection_space (Soup.URI source_uri);
		public unowned string get_realm ();
		public unowned string get_scheme_name ();
		public virtual bool update (Soup.Message msg, string auth_header);
		public string host { get; construct; }
		[NoAccessorMethod]
		public bool is_authenticated { get; }
		[NoAccessorMethod]
		public bool is_for_proxy { get; construct; }
		public string realm { get; construct; }
		public string scheme_name { get; }
		public virtual signal void save_password (string p0, string p1);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class AuthDomain : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AuthDomain ();
		public virtual unowned string accepts (Soup.Message msg);
		public void add_path (string path);
		public virtual unowned string challenge (Soup.Message msg);
		public virtual bool check_password (Soup.Message msg, string username, string password);
		public bool covers (Soup.Message msg);
		public unowned string get_realm ();
		public void remove_path (string path);
		public void set_filter (owned Soup.AuthDomainFilter filter);
		public void set_generic_auth_callback (owned Soup.AuthDomainGenericAuthCallback auth_callback);
		public bool try_generic_auth_callback (Soup.Message msg, string username);
		[NoAccessorMethod]
		public void* filter { get; set; }
		[NoAccessorMethod]
		public void* filter_data { get; set; }
		[NoAccessorMethod]
		public void* generic_auth_callback { get; set; }
		[NoAccessorMethod]
		public void* generic_auth_data { get; set; }
		[NoAccessorMethod]
		public bool proxy { get; construct; }
		public string realm { get; construct; }
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class AuthDomainBasic : Soup.AuthDomain {
		[CCode (type = "SoupAuthDomain*", has_construct_function = false)]
		public AuthDomainBasic (string optname1);
		public static void set_auth_callback (Soup.AuthDomain domain, owned Soup.AuthDomainBasicAuthCallback callback);
		[NoAccessorMethod]
		public void* auth_callback { get; set; }
		[NoAccessorMethod]
		public void* auth_data { get; set; }
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class AuthDomainDigest : Soup.AuthDomain {
		[CCode (type = "SoupAuthDomain*", has_construct_function = false)]
		public AuthDomainDigest (string optname1);
		public static unowned string encode_password (string username, string realm, string password);
		public static void set_auth_callback (Soup.AuthDomain domain, owned Soup.AuthDomainDigestAuthCallback callback);
		[NoAccessorMethod]
		public void* auth_callback { get; set; }
		[NoAccessorMethod]
		public void* auth_data { get; set; }
	}
	[Compact]
	[CCode (ref_function = "soup_buffer_copy", unref_function = "soup_buffer_free", type_id = "SOUP_TYPE_BUFFER", cheader_filename = "libsoup/soup.h")]
	public class Buffer {
		[CCode (array_length_cname = "length", array_length_type = "size_t")]
		public uint8[] data;
		public size_t length;
		[CCode (has_construct_function = false)]
		public Buffer (Soup.MemoryUse use, [CCode (type = "void*", array_length_type = "gsize")] uint8[] data);
		public Soup.Buffer copy ();
		public void* get_owner ();
		[CCode (has_construct_function = false)]
		public Buffer.subbuffer (Soup.Buffer parent, size_t offset, size_t length);
		[CCode (has_construct_function = false)]
		public Buffer.with_owner ([CCode (type = "void*", array_length_type = "gsize")] uint8[] data, void* owner, GLib.DestroyNotify? owner_dnotify);
	}
	[Compact]
	[CCode (type_id = "SOUP_TYPE_BYTE_ARRAY", cheader_filename = "libsoup/soup.h")]
	public class ByteArray {
	}
	[Compact]
	[CCode (type_id = "SOUP_TYPE_CLIENT_CONTEXT", cheader_filename = "libsoup/soup.h")]
	public class ClientContext {
		public unowned Soup.Address get_address ();
		public unowned Soup.AuthDomain get_auth_domain ();
		public unowned string get_auth_user ();
		public unowned string get_host ();
		public unowned Soup.Socket get_socket ();
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class ContentDecoder : GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
		protected ContentDecoder ();
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class ContentSniffer : GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
		public ContentSniffer ();
		[NoWrapper]
		public virtual size_t get_buffer_size ();
		public virtual string sniff (Soup.Message msg, Soup.Buffer buffer, out GLib.HashTable<string,string>? @params);
	}
	[Compact]
	[CCode (copy_function = "soup_cookie_copy", type_id = "SOUP_TYPE_COOKIE", cheader_filename = "libsoup/soup.h")]
	public class Cookie {
		public weak string domain;
		public weak Soup.Date expires;
		public bool http_only;
		public weak string name;
		public weak string path;
		public bool secure;
		public weak string value;
		[CCode (has_construct_function = false)]
		public Cookie (string name, string value, string domain, string path, int max_age);
		public bool applies_to_uri (Soup.URI uri);
		public Soup.Cookie copy ();
		public bool domain_matches (string host);
		public bool equal (Soup.Cookie cookie2);
		public static unowned Soup.Cookie parse (string header, Soup.URI origin);
		public void set_domain (string domain);
		public void set_expires (Soup.Date expires);
		public void set_http_only (bool http_only);
		public void set_max_age (int max_age);
		public void set_name (string name);
		public void set_path (string path);
		public void set_secure (bool secure);
		public void set_value (string value);
		public unowned string to_cookie_header ();
		public unowned string to_set_cookie_header ();
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class CookieJar : GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
		public CookieJar ();
		public void add_cookie (Soup.Cookie cookie);
		public GLib.SList<Soup.Cookie> all_cookies ();
		public void delete_cookie (Soup.Cookie cookie);
		public Soup.CookieJarAcceptPolicy get_accept_policy ();
		public unowned string get_cookies (Soup.URI uri, bool for_http);
		public virtual void save ();
		public void set_accept_policy (Soup.CookieJarAcceptPolicy policy);
		public void set_cookie (Soup.URI uri, string cookie);
		public void set_cookie_with_first_party (Soup.URI uri, Soup.URI first_party, string cookie);
		public Soup.CookieJarAcceptPolicy accept_policy { get; set; }
		[NoAccessorMethod]
		public bool read_only { get; construct; }
		public virtual signal void changed (Soup.Cookie old_cookie, Soup.Cookie new_cookie);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class CookieJarText : Soup.CookieJar, Soup.SessionFeature {
		[CCode (type = "SoupCookieJar*", has_construct_function = false)]
		public CookieJarText (string filename, bool read_only);
		[NoAccessorMethod]
		public string filename { owned get; construct; }
	}
	[Compact]
	[CCode (copy_function = "soup_date_copy", type_id = "SOUP_TYPE_DATE", cheader_filename = "libsoup/soup.h")]
	public class Date {
		public int day;
		public int hour;
		public int minute;
		public int month;
		public int offset;
		public int second;
		public bool utc;
		public int year;
		[CCode (has_construct_function = false)]
		public Date (int year, int month, int day, int hour, int minute, int second);
		public Soup.Date copy ();
		[CCode (has_construct_function = false)]
		public Date.from_now (int offset_seconds);
		[CCode (has_construct_function = false)]
		public Date.from_string (string date_string);
		[CCode (has_construct_function = false)]
		public Date.from_time_t (ulong when);
		public bool is_past ();
		public unowned string to_string (Soup.DateFormat format);
		public ulong to_time_t ();
		public void to_timeval (GLib.TimeVal time);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Logger : GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
		public Logger (Soup.LoggerLogLevel level, int max_body_size);
		public void set_printer (owned Soup.LoggerPrinter printer);
		public void set_request_filter (owned Soup.LoggerFilter request_filter);
		public void set_response_filter (owned Soup.LoggerFilter response_filter);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Message : GLib.Object {
		public weak Soup.MessageBody request_body;
		public weak Soup.MessageHeaders request_headers;
		public weak Soup.MessageBody response_body;
		public weak Soup.MessageHeaders response_headers;
		[CCode (has_construct_function = false)]
		public Message (string method, string uri_string);
		public uint add_header_handler (string @signal, string header, GLib.Callback callback);
		public uint add_status_code_handler (string @signal, uint status_code, GLib.Callback callback);
		public void disable_feature (GLib.Type feature_type);
		[CCode (has_construct_function = false)]
		public Message.from_uri (string method, Soup.URI uri);
		public unowned Soup.Address get_address ();
		public unowned Soup.URI get_first_party ();
		public Soup.MessageFlags get_flags ();
		public Soup.HTTPVersion get_http_version ();
		public unowned Soup.URI get_uri ();
		public bool is_keepalive ();
		public void set_chunk_allocator (owned Soup.ChunkAllocator allocator);
		public void set_first_party (...);
		public void set_flags (Soup.MessageFlags flags);
		public void set_http_version (Soup.HTTPVersion version);
		public void set_request (string content_type, Soup.MemoryUse req_use, [CCode (type = "const char*", array_length_type = "gsize")] uint8[] req_body);
		public void set_response (string content_type, Soup.MemoryUse resp_use, [CCode (type = "const char*", array_length_type = "gsize")] uint8[] resp_body);
		public void set_status (uint status_code);
		public void set_status_full (uint status_code, string reason_phrase);
		public void set_uri (Soup.URI uri);
		public Soup.URI first_party { get; set; }
		public Soup.MessageFlags flags { get; set; }
		public Soup.HTTPVersion http_version { get; set; }
		[NoAccessorMethod]
		public string method { owned get; set; }
		[NoAccessorMethod]
		public string reason_phrase { owned get; set; }
		[NoAccessorMethod]
		public bool server_side { get; construct; }
		[NoAccessorMethod]
		public uint status_code { get; set; }
		public Soup.URI uri { get; set; }
		[HasEmitter]
		public virtual signal void content_sniffed (string p0, GLib.HashTable p1);
		[HasEmitter]
		public virtual signal void finished ();
		[HasEmitter]
		public virtual signal void got_body ();
		[HasEmitter]
		public virtual signal void got_chunk (Soup.Buffer chunk);
		[HasEmitter]
		public virtual signal void got_headers ();
		[HasEmitter]
		public virtual signal void got_informational ();
		[HasEmitter]
		public virtual signal void restarted ();
		[HasEmitter]
		public virtual signal void wrote_body ();
		[HasEmitter]
		public virtual signal void wrote_body_data (Soup.Buffer p0);
		[HasEmitter]
		public virtual signal void wrote_chunk ();
		[HasEmitter]
		public virtual signal void wrote_headers ();
		[HasEmitter]
		public virtual signal void wrote_informational ();
	}
	[Compact]
	[CCode (type_id = "SOUP_TYPE_MESSAGE_BODY", cheader_filename = "libsoup/soup.h")]
	public class MessageBody {
		[CCode (array_length_cname = "length", array_length_type = "gint64")]
		public weak uint8[] data;
		public int64 length;
		[CCode (has_construct_function = false)]
		public MessageBody ();
		public void append (Soup.MemoryUse use, [CCode (type = "gconstpointer", array_length_type = "gsize")] uint8[] data);
		public void append_buffer (Soup.Buffer buffer);
		public void complete ();
		public Soup.Buffer flatten ();
		public bool get_accumulate ();
		public unowned Soup.Buffer get_chunk (int64 offset);
		public void got_chunk (Soup.Buffer chunk);
		public void set_accumulate (bool accumulate);
		public void truncate ();
		public void wrote_chunk (Soup.Buffer chunk);
	}
	[Compact]
	[CCode (type_id = "SOUP_TYPE_MESSAGE_HEADERS", cheader_filename = "libsoup/soup.h")]
	public class MessageHeaders {
		[CCode (has_construct_function = false)]
		public MessageHeaders (Soup.MessageHeadersType type);
		public void append (string name, string value);
		public void clear ();
		public void @foreach (Soup.MessageHeadersForeachFunc func);
		public void free_ranges (Soup.Range ranges);
		public unowned string @get (string name);
		public bool get_content_disposition (out string disposition, out GLib.HashTable? @params);
		public int64 get_content_length ();
		public bool get_content_range (int64 start, int64 end, int64 total_length);
		public unowned string get_content_type (out GLib.HashTable<string,string>? @params);
		public Soup.Encoding get_encoding ();
		public Soup.Expectation get_expectations ();
		public unowned string get_list (string name);
		public unowned string get_one (string name);
		public bool get_ranges (int64 total_length, out unowned Soup.Range ranges, int length);
		public void remove (string name);
		public void replace (string name, string value);
		public void set_content_disposition (string disposition, GLib.HashTable<string,string>? @params);
		public void set_content_length (int64 content_length);
		public void set_content_range (int64 start, int64 end, int64 total_length);
		public void set_content_type (string content_type, GLib.HashTable<string,string>? @params);
		public void set_encoding (Soup.Encoding encoding);
		public void set_expectations (Soup.Expectation expectations);
		public void set_range (int64 start, int64 end);
		public void set_ranges (Soup.Range ranges, int length);
	}
	[Compact]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class MessageHeadersIter {
		public void init (Soup.MessageHeaders hdrs);
		public bool next (out unowned string name, out unowned string value);
	}
	[Compact]
	[CCode (type_id = "SOUP_TYPE_MULTIPART", cheader_filename = "libsoup/soup.h")]
	public class Multipart {
		[CCode (has_construct_function = false)]
		public Multipart (string mime_type);
		public void append_form_file (string control_name, string filename, string content_type, Soup.Buffer body);
		public void append_form_string (string control_name, string data);
		public void append_part (Soup.MessageHeaders headers, Soup.Buffer body);
		[CCode (has_construct_function = false)]
		public Multipart.from_message (Soup.MessageHeaders headers, Soup.MessageBody body);
		public int get_length ();
		public bool get_part (int part, out unowned Soup.MessageHeaders headers, out unowned Soup.Buffer body);
		public void to_message (Soup.MessageHeaders dest_headers, Soup.MessageBody dest_body);
	}
	[Compact]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Range {
		public int64 end;
		public int64 start;
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Server : GLib.Object {
		[CCode (has_construct_function = false)]
		public Server (string optname1, ...);
		public void add_auth_domain (Soup.AuthDomain auth_domain);
		public void add_handler (string path, owned Soup.ServerCallback callback);
		public unowned GLib.MainContext get_async_context ();
		public unowned Soup.Socket get_listener ();
		public uint get_port ();
		public bool is_https ();
		public void pause_message (Soup.Message msg);
		public void quit ();
		public void remove_auth_domain (Soup.AuthDomain auth_domain);
		public void remove_handler (string path);
		public void run ();
		public void run_async ();
		public void unpause_message (Soup.Message msg);
		public GLib.MainContext async_context { get; construct; }
		[NoAccessorMethod]
		public Soup.Address @interface { owned get; construct; }
		public uint port { get; construct; }
		[NoAccessorMethod]
		public bool raw_paths { get; construct; }
		[NoAccessorMethod]
		public string server_header { owned get; set construct; }
		[NoAccessorMethod]
		public string ssl_cert_file { owned get; construct; }
		[NoAccessorMethod]
		public string ssl_key_file { owned get; construct; }
		public virtual signal void request_aborted (Soup.Message msg, Soup.ClientContext client);
		public virtual signal void request_finished (Soup.Message msg, Soup.ClientContext client);
		public virtual signal void request_read (Soup.Message msg, Soup.ClientContext client);
		public virtual signal void request_started (Soup.Message msg, Soup.ClientContext client);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Session : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Session ();
		public void abort ();
		[NoWrapper]
		public virtual void auth_required (Soup.Message msg, Soup.Auth auth, bool retrying);
		public virtual void cancel_message (Soup.Message msg, uint status_code);
		public unowned GLib.MainContext get_async_context ();
		public unowned Soup.SessionFeature get_feature (GLib.Type feature_type);
		public unowned Soup.SessionFeature get_feature_for_message (GLib.Type feature_type, Soup.Message msg);
		public GLib.SList<weak Soup.SessionFeature> get_features (GLib.Type feature_type);
		public void pause_message (Soup.Message msg);
		public void prepare_for_uri (Soup.URI uri);
		public virtual void queue_message (owned Soup.Message msg, Soup.SessionCallback? callback);
		public void remove_feature (Soup.SessionFeature feature);
		public virtual void requeue_message (Soup.Message msg);
		public virtual uint send_message (Soup.Message msg);
		public void unpause_message (Soup.Message msg);
		[NoAccessorMethod]
		public string accept_language { owned get; set; }
		[NoAccessorMethod]
		public bool accept_language_auto { get; set; }
		[NoAccessorMethod]
		public Soup.SessionFeature add_feature { owned get; set; }
		[NoAccessorMethod]
		public GLib.Type add_feature_by_type { get; set; }
		public GLib.MainContext async_context { get; construct; }
		[NoAccessorMethod]
		public uint idle_timeout { get; set; }
		[NoAccessorMethod]
		public int max_conns { get; set; }
		[NoAccessorMethod]
		public int max_conns_per_host { get; set; }
		[NoAccessorMethod]
		public Soup.URI proxy_uri { owned get; set; }
		[NoAccessorMethod]
		public GLib.Type remove_feature_by_type { get; set; }
		[NoAccessorMethod]
		public string ssl_ca_file { owned get; set; }
		[NoAccessorMethod]
		public bool ssl_strict { get; set; }
		[NoAccessorMethod]
		public uint timeout { get; set; }
		[NoAccessorMethod]
		public bool use_ntlm { get; set; }
		[NoAccessorMethod]
		public string user_agent { owned get; set; }
		public virtual signal void authenticate (Soup.Message msg, Soup.Auth auth, bool retrying);
		public virtual signal void connection_created (GLib.Object p0);
		public virtual signal void request_queued (Soup.Message p0);
		public virtual signal void request_started (Soup.Message msg, Soup.Socket socket);
		public virtual signal void request_unqueued (Soup.Message p0);
		public virtual signal void tunneling (GLib.Object p0);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class SessionAsync : Soup.Session {
		[CCode (type = "SoupSession*", has_construct_function = false)]
		public SessionAsync ();
		[CCode (type = "SoupSession*", has_construct_function = false)]
		public SessionAsync.with_options (string optname1, ...);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class SessionSync : Soup.Session {
		[CCode (type = "SoupSession*", has_construct_function = false)]
		public SessionSync ();
		[CCode (type = "SoupSession*", has_construct_function = false)]
		public SessionSync.with_options (string optname1, ...);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public class Socket : GLib.Object {
		[CCode (has_construct_function = false)]
		public Socket (string optname1);
		public void connect_async (GLib.Cancellable cancellable, Soup.SocketCallback callback);
		public uint connect_sync (GLib.Cancellable cancellable);
		public void disconnect ();
		public int get_fd ();
		public unowned Soup.Address get_local_address ();
		public unowned Soup.Address get_remote_address ();
		public bool is_connected ();
		public bool is_ssl ();
		public bool listen ();
		public Soup.SocketIOStatus read ([CCode (array_length_type = "gsize")] uint8[] buffer, out size_t nread, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Soup.SocketIOStatus read_until ([CCode (array_length_type = "gsize")] uint8[] buffer, [CCode (array_length_type = "gsize")] uint8[] boundary, out size_t nread, out bool got_boundary, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool start_proxy_ssl (string ssl_host, GLib.Cancellable cancellable);
		public bool start_ssl (GLib.Cancellable cancellable);
		public Soup.SocketIOStatus write ([CCode (array_length_type = "gsize")] uint8[] buffer, out size_t nwrote, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[NoAccessorMethod]
		public GLib.MainContext async_context { get; construct; }
		[NoAccessorMethod]
		public bool is_server { get; }
		public Soup.Address local_address { get; construct; }
		[NoAccessorMethod]
		public bool non_blocking { get; set; }
		public Soup.Address remote_address { get; construct; }
		[NoAccessorMethod]
		public void* ssl_creds { get; set; }
		[NoAccessorMethod]
		public bool ssl_strict { get; construct; }
		[NoAccessorMethod]
		public uint timeout { get; set; }
		[NoAccessorMethod]
		public bool trusted_certificate { get; construct; }
		public virtual signal void disconnected ();
		public virtual signal void new_connection (Soup.Socket p0);
		public virtual signal void readable ();
		public virtual signal void writable ();
	}
	[Compact]
	[CCode (copy_function = "soup_uri_copy", type_id = "SOUP_TYPE_URI", cheader_filename = "libsoup/soup.h")]
	public class URI {
		public weak string fragment;
		public weak string host;
		public weak string password;
		public weak string path;
		public uint port;
		public weak string query;
		public weak string scheme;
		public weak string user;
		[CCode (has_construct_function = false)]
		public URI (string uri_string);
		public Soup.URI copy ();
		public unowned Soup.URI copy_host ();
		public static string decode (string part);
		public static string encode (string part, string? escape_extra);
		public bool equal (Soup.URI uri2);
		public static bool host_equal (Soup.URI v1, Soup.URI v2);
		public static uint host_hash (Soup.URI key);
		public static string normalize (string part, string unescape_extra);
		public void set_fragment (string fragment);
		public void set_host (string host);
		public void set_password (string password);
		public void set_path (string path);
		public void set_port (uint port);
		public void set_query (string query);
		public void set_query_from_fields (...);
		public void set_query_from_form (GLib.HashTable<string,string> form);
		public void set_scheme (string scheme);
		public void set_user (string user);
		public string to_string (bool just_path_and_query);
		public bool uses_default_port ();
		[CCode (has_construct_function = false)]
		public URI.with_base (Soup.URI @base, string uri_string);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public interface ProxyResolver : Soup.SessionFeature, GLib.Object {
		public abstract void get_proxy_async (Soup.Message msg, GLib.MainContext async_context, GLib.Cancellable cancellable, Soup.ProxyResolverCallback callback);
		public abstract uint get_proxy_sync (Soup.Message msg, GLib.Cancellable cancellable, out unowned Soup.Address addr);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public interface ProxyURIResolver : GLib.Object {
		public abstract void get_proxy_uri_async (Soup.URI uri, GLib.MainContext async_context, GLib.Cancellable cancellable, Soup.ProxyURIResolverCallback callback);
		public abstract uint get_proxy_uri_sync (Soup.URI uri, GLib.Cancellable cancellable, out unowned Soup.URI proxy_uri);
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public interface SessionFeature : GLib.Object {
		public abstract void attach (Soup.Session session);
		public abstract void detach (Soup.Session session);
		public abstract void add_feature (GLib.Type type);
		[NoWrapper]
		public abstract void request_queued (Soup.Session session, Soup.Message msg);
		[NoWrapper]
		public abstract void request_started (Soup.Session session, Soup.Message msg, Soup.Socket socket);
		[NoWrapper]
		public abstract void request_unqueued (Soup.Session session, Soup.Message msg);
	}
	[CCode (cprefix = "SOUP_ADDRESS_FAMILY_", cheader_filename = "libsoup/soup.h")]
	public enum AddressFamily {
		INVALID,
		IPV4,
		IPV6
	}
	[CCode (cprefix = "SOUP_CONNECTION_", cheader_filename = "libsoup/soup.h")]
	public enum ConnectionState {
		NEW,
		CONNECTING,
		IDLE,
		IN_USE,
		REMOTE_DISCONNECTED,
		DISCONNECTED
	}
	[CCode (cprefix = "SOUP_COOKIE_JAR_ACCEPT_", cheader_filename = "libsoup/soup.h")]
	public enum CookieJarAcceptPolicy {
		ALWAYS,
		NEVER,
		NO_THIRD_PARTY
	}
	[CCode (cprefix = "SOUP_DATE_", cheader_filename = "libsoup/soup.h")]
	public enum DateFormat {
		HTTP,
		COOKIE,
		RFC2822,
		ISO8601_COMPACT,
		ISO8601_FULL,
		ISO8601,
		ISO8601_XMLRPC
	}
	[CCode (cprefix = "SOUP_ENCODING_", cheader_filename = "libsoup/soup.h")]
	public enum Encoding {
		UNRECOGNIZED,
		NONE,
		CONTENT_LENGTH,
		EOF,
		CHUNKED,
		BYTERANGES
	}
	[CCode (cprefix = "SOUP_EXPECTATION_", cheader_filename = "libsoup/soup.h")]
	[Flags]
	public enum Expectation {
		UNRECOGNIZED,
		CONTINUE
	}
	[CCode (cprefix = "SOUP_HTTP_", cheader_filename = "libsoup/soup.h")]
	public enum HTTPVersion {
		@1_0,
		@1_1
	}
	[CCode (cprefix = "SOUP_STATUS_", cheader_filename = "libsoup/soup.h")]
	public enum KnownStatusCode {
		NONE,
		CANCELLED,
		CANT_RESOLVE,
		CANT_RESOLVE_PROXY,
		CANT_CONNECT,
		CANT_CONNECT_PROXY,
		SSL_FAILED,
		IO_ERROR,
		MALFORMED,
		TRY_AGAIN,
		TOO_MANY_REDIRECTS,
		CONTINUE,
		SWITCHING_PROTOCOLS,
		PROCESSING,
		OK,
		CREATED,
		ACCEPTED,
		NON_AUTHORITATIVE,
		NO_CONTENT,
		RESET_CONTENT,
		PARTIAL_CONTENT,
		MULTI_STATUS,
		MULTIPLE_CHOICES,
		MOVED_PERMANENTLY,
		FOUND,
		MOVED_TEMPORARILY,
		SEE_OTHER,
		NOT_MODIFIED,
		USE_PROXY,
		NOT_APPEARING_IN_THIS_PROTOCOL,
		TEMPORARY_REDIRECT,
		BAD_REQUEST,
		UNAUTHORIZED,
		PAYMENT_REQUIRED,
		FORBIDDEN,
		NOT_FOUND,
		METHOD_NOT_ALLOWED,
		NOT_ACCEPTABLE,
		PROXY_AUTHENTICATION_REQUIRED,
		PROXY_UNAUTHORIZED,
		REQUEST_TIMEOUT,
		CONFLICT,
		GONE,
		LENGTH_REQUIRED,
		PRECONDITION_FAILED,
		REQUEST_ENTITY_TOO_LARGE,
		REQUEST_URI_TOO_LONG,
		UNSUPPORTED_MEDIA_TYPE,
		REQUESTED_RANGE_NOT_SATISFIABLE,
		INVALID_RANGE,
		EXPECTATION_FAILED,
		UNPROCESSABLE_ENTITY,
		LOCKED,
		FAILED_DEPENDENCY,
		INTERNAL_SERVER_ERROR,
		NOT_IMPLEMENTED,
		BAD_GATEWAY,
		SERVICE_UNAVAILABLE,
		GATEWAY_TIMEOUT,
		HTTP_VERSION_NOT_SUPPORTED,
		INSUFFICIENT_STORAGE,
		NOT_EXTENDED
	}
	[CCode (cprefix = "SOUP_LOGGER_LOG_", cheader_filename = "libsoup/soup.h")]
	public enum LoggerLogLevel {
		NONE,
		MINIMAL,
		HEADERS,
		BODY
	}
	[CCode (cprefix = "SOUP_MEMORY_", cheader_filename = "libsoup/soup.h")]
	public enum MemoryUse {
		STATIC,
		TAKE,
		COPY,
		TEMPORARY
	}
	[CCode (cprefix = "SOUP_MESSAGE_", cheader_filename = "libsoup/soup.h")]
	[Flags]
	public enum MessageFlags {
		NO_REDIRECT,
		OVERWRITE_CHUNKS,
		CONTENT_DECODED,
		CERTIFICATE_TRUSTED
	}
	[CCode (cprefix = "SOUP_MESSAGE_HEADERS_", cheader_filename = "libsoup/soup.h")]
	public enum MessageHeadersType {
		REQUEST,
		RESPONSE,
		MULTIPART
	}
	[CCode (cprefix = "SOUP_SSL_ERROR_", cheader_filename = "libsoup/soup.h")]
	public enum SSLError {
		HANDSHAKE_NEEDS_READ,
		HANDSHAKE_NEEDS_WRITE,
		CERTIFICATE,
		HANDSHAKE_FAILED
	}
	[CCode (cprefix = "SOUP_SOCKET_", cheader_filename = "libsoup/soup.h")]
	public enum SocketIOStatus {
		OK,
		WOULD_BLOCK,
		EOF,
		ERROR
	}
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void AddressCallback (Soup.Address addr, uint status);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate bool AuthDomainBasicAuthCallback (Soup.AuthDomain domain, Soup.Message msg, string username, string password);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate unowned string AuthDomainDigestAuthCallback (Soup.AuthDomain domain, Soup.Message msg, string username);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate bool AuthDomainFilter (Soup.AuthDomain domain, Soup.Message msg);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate bool AuthDomainGenericAuthCallback (Soup.AuthDomain domain, Soup.Message msg, string username);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate unowned Soup.Buffer ChunkAllocator (Soup.Message msg, size_t max_len);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate Soup.LoggerLogLevel LoggerFilter (Soup.Logger logger, Soup.Message msg);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void LoggerPrinter (Soup.Logger logger, Soup.LoggerLogLevel level, char direction, string data);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void MessageHeadersForeachFunc (string name, string value);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void ProxyResolverCallback (Soup.ProxyResolver p1, Soup.Message p2, uint p3, Soup.Address p4);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void ProxyURIResolverCallback (Soup.ProxyURIResolver resolver, uint status, Soup.URI proxy_uri);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void ServerCallback (Soup.Server server, Soup.Message msg, string path, GLib.HashTable<string,string> query, Soup.ClientContext client);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void SessionCallback (Soup.Session session, Soup.Message msg);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public delegate void SocketCallback (Soup.Socket sock, uint status);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int ADDRESS_ANY_PORT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string ADDRESS_FAMILY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string ADDRESS_NAME;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string ADDRESS_PHYSICAL;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string ADDRESS_PORT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string ADDRESS_SOCKADDR;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_ADD_PATH;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_BASIC_AUTH_CALLBACK;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_BASIC_AUTH_DATA;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int AUTH_DOMAIN_BASIC_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_DIGEST_AUTH_CALLBACK;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_DIGEST_AUTH_DATA;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int AUTH_DOMAIN_DIGEST_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_FILTER;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_FILTER_DATA;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_GENERIC_AUTH_CALLBACK;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_GENERIC_AUTH_DATA;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int AUTH_DOMAIN_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_PROXY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_REALM;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_DOMAIN_REMOVE_PATH;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int AUTH_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_HOST;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_IS_AUTHENTICATED;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_IS_FOR_PROXY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_REALM;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string AUTH_SCHEME_NAME;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CHAR_HTTP_CTL;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CHAR_HTTP_SEPARATOR;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CHAR_URI_GEN_DELIMS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CHAR_URI_PERCENT_ENCODED;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CHAR_URI_SUB_DELIMS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CONTENT_DECODER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int CONTENT_SNIFFER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string COOKIE_JAR_ACCEPT_POLICY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_JAR_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string COOKIE_JAR_READ_ONLY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string COOKIE_JAR_TEXT_FILENAME;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_JAR_TEXT_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_MAX_AGE_ONE_DAY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_MAX_AGE_ONE_HOUR;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_MAX_AGE_ONE_WEEK;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int COOKIE_MAX_AGE_ONE_YEAR;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int DATE_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int FORM_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string FORM_MIME_TYPE_MULTIPART;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string FORM_MIME_TYPE_URLENCODED;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int HEADERS_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int LOGGER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int MESSAGE_BODY_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_FIRST_PARTY;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_FLAGS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int MESSAGE_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int MESSAGE_HEADERS_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_HTTP_VERSION;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_METHOD;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_REASON_PHRASE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_SERVER_SIDE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_STATUS_CODE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string MESSAGE_URI;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int METHOD_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int MISC_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int MULTIPART_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int PASSWORD_MANAGER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int PROXY_RESOLVER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int PROXY_URI_RESOLVER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_ASYNC_CONTEXT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int SERVER_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_INTERFACE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_PORT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_RAW_PATHS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_SERVER_HEADER;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_SSL_CERT_FILE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SERVER_SSL_KEY_FILE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_ACCEPT_LANGUAGE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_ACCEPT_LANGUAGE_AUTO;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_ADD_FEATURE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_ADD_FEATURE_BY_TYPE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_ASYNC_CONTEXT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int SESSION_ASYNC_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int SESSION_FEATURE_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int SESSION_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_IDLE_TIMEOUT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_MAX_CONNS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_MAX_CONNS_PER_HOST;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_PROXY_URI;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_REMOVE_FEATURE_BY_TYPE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_SSL_CA_FILE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_SSL_STRICT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int SESSION_SYNC_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_TIMEOUT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_USER_AGENT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SESSION_USE_NTLM;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_ASYNC_CONTEXT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_FLAG_NONBLOCKING;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int SOCKET_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_IS_SERVER;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_LOCAL_ADDRESS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_REMOTE_ADDRESS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_SSL_CREDENTIALS;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_SSL_STRICT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_TIMEOUT;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const string SOCKET_TRUSTED_CERTIFICATE;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int STATUS_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int TYPES_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int URI_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int VALUE_UTILS_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public const int XMLRPC_H;
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned GLib.TimeoutSource add_completion (GLib.MainContext async_context, GLib.SourceFunc function, void* data);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned GLib.TimeoutSource add_idle (GLib.MainContext async_context, GLib.SourceFunc function, void* data);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned GLib.TimeoutSource add_timeout (GLib.MainContext async_context, uint interval, GLib.SourceFunc function, void* data);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.SList<Soup.Cookie> cookies_from_request (Soup.Message msg);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.SList<Soup.Cookie> cookies_from_response (Soup.Message msg);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned string cookies_to_cookie_header (GLib.SList<Soup.Cookie> cookies);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void cookies_to_request (GLib.SList<Soup.Cookie> cookies, Soup.Message msg);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void cookies_to_response (GLib.SList<Soup.Cookie> cookies, Soup.Message msg);
	[Deprecated (since = "vala-0.12", replacement = "Form.decode")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.HashTable<string,string> form_decode (string encoded_form);
	[Deprecated (since = "vala-0.12", replacement = "Form.decode_multipart")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.HashTable<string,string> form_decode_multipart (Soup.Message msg, string file_control_name, out string filename, out string content_type, out Soup.Buffer file);
	[Deprecated (since = "vala-0.12", replacement = "Form.encode")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static string form_encode (...);
	[Deprecated (since = "vala-0.12", replacement = "Form.encode_datalist")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static string form_encode_datalist (void* form_data_set);
	[Deprecated (since = "vala-0.12", replacement = "Form.encode_hash")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static string form_encode_hash (GLib.HashTable<string,string> form_data_set);
	[Deprecated (since = "vala-0.12")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static string form_encode_valist (string first_field, void* args);
	[Deprecated (since = "vala-0.12", replacement = "Form.request_new")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static Soup.Message form_request_new (string method, string uri, ...);
	[Deprecated (since = "vala-0.12", replacement = "Form.request_new_from_datalist")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static Soup.Message form_request_new_from_datalist (string method, string uri, void* form_data_set);
	[Deprecated (since = "vala-0.12", replacement = "Form.request_new_from_hash")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static Soup.Message form_request_new_from_hash (string method, string uri, GLib.HashTable<string,string> form_data_set);
	[Deprecated (since = "vala-0.12", replacement = "Form.request_new_from_multipart")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static Soup.Message form_request_new_from_multipart (string uri, Soup.Multipart multipart);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool header_contains (string header, string token);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void header_g_string_append_param (GLib.StringBuilder str, string name, string value);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void header_g_string_append_param_quoted (GLib.StringBuilder str, string name, string value);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.SList<string> header_parse_list (string header);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.HashTable<string,string> header_parse_param_list (string header);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.SList<string> header_parse_quality_list (string header, GLib.SList<string> unacceptable);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.HashTable<string,string> header_parse_semi_param_list (string header);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool headers_parse (string str, int len, Soup.MessageHeaders dest);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static uint headers_parse_request (string str, int len, Soup.MessageHeaders req_headers, out unowned string req_method, out unowned string req_path, Soup.HTTPVersion ver);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool headers_parse_response (string str, int len, Soup.MessageHeaders headers, Soup.HTTPVersion ver, uint status_code, out unowned string reason_phrase);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool headers_parse_status_line (string status_line, Soup.HTTPVersion ver, uint status_code, out unowned string reason_phrase);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.Quark http_error_quark ();
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.Quark ssl_error_quark ();
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned string status_get_phrase (uint status_code);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static uint status_proxify (uint status_code);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool str_case_equal (void* v1, void* v2);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static uint str_case_hash (void* key);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void value_array_append (GLib.ValueArray array, GLib.Type type);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void value_array_append_vals (GLib.ValueArray array, ...);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned GLib.ValueArray value_array_from_args (void* args);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool value_array_get_nth (GLib.ValueArray array, uint index_, GLib.Type type);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void value_array_insert (GLib.ValueArray array, uint index_, GLib.Type type);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned GLib.ValueArray value_array_new ();
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned GLib.ValueArray value_array_new_with_vals (...);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool value_array_to_args (GLib.ValueArray array, void* args);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void value_hash_insert (GLib.HashTable<string,GLib.Value> hash, string key, GLib.Type type, ...);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void value_hash_insert_vals (GLib.HashTable<string,GLib.Value> hash, ...);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void value_hash_insert_value (GLib.HashTable<string,GLib.Value> hash, string key, GLib.Value value);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool value_hash_lookup (GLib.HashTable<string,GLib.Value> hash, string key, GLib.Type type);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool value_hash_lookup_vals (GLib.HashTable<string,GLib.Value> hash, ...);
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.HashTable<string,GLib.Value> value_hash_new ();
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.HashTable<string,GLib.Value> value_hash_new_with_vals (...);
	[PrintfFormat]
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.build_fault")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned string xmlrpc_build_fault (int fault_code, string fault_format, ...);
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.build_method_call")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned string xmlrpc_build_method_call (string method_name, GLib.Value[] @params);
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.build_method_response")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static unowned string xmlrpc_build_method_response (GLib.Value value);
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.error_quark")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.Quark xmlrpc_error_quark ();
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.extract_method_call")]
	[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
	public static bool xmlrpc_extract_method_call (string method_call, int length, out unowned string method_name, ...);
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.extract_method_response")]
	[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
	public static bool xmlrpc_extract_method_response (string method_response, int length, ...) throws GLib.Error;
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.fault_quark")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static GLib.Quark xmlrpc_fault_quark ();
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.parse_method_call")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool xmlrpc_parse_method_call (string method_call, int length, out unowned string method_name, out unowned GLib.ValueArray @params);
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.parse_method_response")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static bool xmlrpc_parse_method_response (string method_response, int length, GLib.Value value) throws GLib.Error;
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.request_new")]
	[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
	public static unowned Soup.Message xmlrpc_request_new (string uri, string method_name, ...);
	[PrintfFormat]
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.set_fault")]
	[CCode (cheader_filename = "libsoup/soup.h")]
	public static void xmlrpc_set_fault (Soup.Message msg, int fault_code, string fault_format, ...);
	[Deprecated (since = "vala-0.12", replacement = "XMLRPC.set_response")]
	[CCode (cheader_filename = "libsoup/soup.h", sentinel = "G_TYPE_INVALID")]
	public static void xmlrpc_set_response (Soup.Message msg, ...);

	[CCode (cheader_filename = "libsoup/soup-request.h")]
	public class Request : GLib.Object, GLib.Initable {
		[CCode (has_construct_function = false)]
        public Request ();
        [CCode (array_null_terminated=true)]
        public class string[] schemes;
        public virtual GLib.InputStream send (GLib.Cancellable? cancellable) throws GLib.Error;
        public virtual void send_async (GLib.Cancellable cancellable, GLib.AsyncReadyCallback callback) throws GLib.Error;
        public virtual GLib.InputStream send_finish (Request request, GLib.AsyncResult result) throws GLib.Error;
        public virtual long get_content_length (); 
        public virtual string get_content_type (); 
        public virtual Soup.Session get_session ();
        public virtual Soup.URI get_uri ();
    }

	[CCode (type_id = "SOUP_TYPE_REQUESTER", cheader_filename = "libsoup/soup-requester.h")]
	public class Requester: GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
        public Requester ();
        public Request request (string uri) throws GLib.Error; 
        public Request request_uri (Soup.URI uri) throws GLib.Error;
    }


}
