#!/bin/bash

/bin/mkdir -p $ROOTFS/target/dev
/bin/mkdir -p $ROOTFS/target/proc
/bin/mkdir -p $ROOTFS/target/sys

/bin/mount --bind /dev $ROOTFS/target/dev
/bin/mount --bind /dev/pts $ROOTFS/target/dev/pts
/bin/mount --bind /proc $ROOTFS/target/proc
/bin/mount --bind /sys $ROOTFS/target/sys

set -e

DEVICE=$1
BOOT=$2
PATH=$PATH:/usr/sbin:/usr/bin:/bin:/sbin

function do_chroot() {
    /usr/sbin/chroot $ROOTFS/target /usr/bin/env PATH=$PATH $@ 
}

# Source blankon-installer default values
if [ -f /etc/default/blankon-installer ];then
  . /etc/default/blankon-installer
fi

rm -f $ROOTFS/target/etc/fstab

###### REMOVE PACKAGES

P=""
if [ -f $ROOTFS/lib/live/mount/medium/live/packages-to-remove ];then
    for i in `cat $ROOTFS/lib/live/mount/medium/live/packages-to-remove`;do
        P="$P $i"
    done
    echo "Removing packages: $P"
fi

if [ "x$P" != "x" ];then
    do_chroot /usr/bin/apt-get --yes purge $P
fi

###### ENCRYPTION SPECIFIC SETTING UP
if [ -f /tmp/pass ];
then
  echo "Encryption specific setting up"
	# Add the hook file
  cp $ROOTFS/usr/share/initramfs-tools/hooks/cryptroot $ROOTFS/target/etc/initramfs-tools/hooks/cryptroot

  touch $ROOTFS/target/etc/crypttab
  echo "root /dev/lvm/root none luks,retry=1" > $ROOTFS/target/etc/crypttab
  touch $ROOTFS/target/etc/fstab
  echo "/dev/mapper/root ext4 relatime,errors=remount-ro 0 1" >> $ROOTFS/target/etc/fstab
  echo "$BOOT /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro 0 2" >> $ROOTFS/target/etc/fstab
  
  # echo "Adding more module to initramfs"
  echo "aes-i586" >> $ROOTFS/target/etc/initramfs-tools/modules
  echo "dm-crypt" >> $ROOTFS/target/etc/initramfs-tools/modules
  echo "dm-mod" >> $ROOTFS/target/etc/initramfs-tools/modules
  echo "sha256" >> $ROOTFS/target/etc/initramfs-tools/modules

  echo "CRYPTSETUP=y" >> $ROOTFS/target/etc/environment

fi

###### CLEAN UP PACKAGES

echo "Removing unused packages"
do_chroot /usr/bin/apt-get --yes autoremove

echo "Clean up packaging system"
do_chroot /usr/bin/apt-get --yes clean 

###### USER

read AUTOLOGIN USERNAME < $ROOTFS/tmp/user-setup
echo "Configuring user $USERNAME"
echo "Auto-login: $AUTOLIGIN"
rm -f $ROOTFS/tmp/user-setup
USER_GROUPS=sudo,cdrom,floppy,audio,dip,video,plugdev,scanner,netdev,bluetooth
do_chroot /usr/sbin/useradd -G $USER_GROUPS -m -s /bin/bash $USERNAME

do_chroot /usr/sbin/chpasswd $USERNAME < $ROOTFS/tmp/user-pass
do_chroot /usr/bin/chfn < $ROOTFS/tmp/user-info
rm -f $ROOTFS/tmp/user-pass

###### CUSTOM GROUP

if [ -n "$BI_CUSTOM_GROUPS" ];then
  for i in $BI_CUSTOM_GROUPS;do
    do_chroot /usr/sbin/groupadd -r $i
    do_chroot /usr/sbin/adduser $USERNAME $i
  done
fi

###### AUTOLOGIN

if [ "$AUTOLOGIN" = "1" ];then
    if [ -s $ROOTFS/target/var/lib/dpkg/info/lightdm.list ];then
        sed -i -r -e "s/autologin-user=blankon/autologin-user=$USERNAME/g" $ROOTFS/target/usr/share/lightdm/lightdm.conf.d/40-lightdm-webkit-greeter.conf
        if [ ! -s $ROOTFS/target/etc/pam.d/lightdm-autologin ];then
            cat << @@EOF > $ROOTFS/target/etc/pam.d/lightdm-autologin
auth requisite pam_nologin.so
auth required pam_env.so readenv=1
auth required pam_env.so readenv=1 envfile=/etc/default/locale
auth    required    pam_succeed_if.so user != root quiet_success
auth required pam_permit.so
@include common-account
session required pam_limits.so
@include common-session
@include common-password
@@EOF
        fi
    fi
else 
    sed -i -r -e "s/autologin-/#autologin-/g" $ROOTFS/target/usr/share/lightdm/lightdm.conf.d/40-lightdm-webkit-greeter.conf

fi
###### HOSTNAME

read HOSTNAME < $ROOTFS/tmp/hostname
echo "Setting up hostname $HOSTNAME"
mv $ROOTFS/tmp/hostname $ROOTFS/target/etc/
    cat << @@EOF > $ROOTFS/target/etc/hosts 
127.0.0.1   localhost $HOSTNAME

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
@@EOF

###### SCIM

cat << @@EOF > $ROOTFS/target/etc/X11/Xsession.d/99scim
GTK_IM_MODULE=scim
QT_IM_MODULE=scim

export GTK_IM_MODULE
export QT_IM_MODULE
@@EOF

###### Locale
if [ -f /run/locale ];then
    cp /run/locale $ROOTFS/target/etc/default/
fi

###### gnome settings overrides
if [ -f /usr/share/glib-2.0/schemas/blankon.gschema.override ];then
  cp /usr/share/glib-2.0/schemas/blankon.gschema.override $ROOTFS/target/usr/share/glib-2.0/schemas/blankon.gschema.override 
  do_chroot /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas/
fi

###### Accounts service
if [ -f /run/accounts-service ];then
  mkdir -p $ROOTFS/target/var/lib/AccountsService/users/
  cp /run/accounts-service $ROOTFS/target/var/lib/AccountsService/users/$USERNAME
fi


###### Timezone
TZ=`cat /tmp/timezone`
pushd $ROOTFS/target/etc
set +
rm -f localtime
set -
ln -s $ROOTFS/usr/share/zoneinfo/$TZ localtime
popd
cp /tmp/timezone $ROOTFS/target/etc/timezone

###### Repository

if [ -f $ROOTFS/usr/share/blankon-repository-setup/sources.list ];then
    cp -f $ROOTFS/usr/share/blankon-repository-setup/sources.list $ROOTFS/target/etc/apt/ 
fi

if [ -f $ROOTFS/target/etc/apt/sources.list.d/local.list ];then
    rm -f $ROOTFS/target/etc/apt/sources.list.d/local.list
fi

###### HOME

if [ -f /tmp/fstab ];then
    mv /tmp/fstab $ROOTFS/target/etc/fstab
fi


###### Swap

for i in `cat $ROOTFS/tmp/swaps`;do
    mkswap $i
    echo "$i    none    swap    sw  0   0" >> $ROOTFS/target/etc/fstab
done


###### OpenSSH server
if [ -e $ROOTFS/target/var/lib/dpkg/info/openssh-server.postinst ]; then
    echo "Restarting openssh server"
    if ! ls $ROOTFS/target/etc/ssh/ssh_host_*_key > /dev/null 2>&1; then
        do_chroot /usr/sbin/dpkg-reconfigure --no-reload openssh-server
    fi
fi


###### Write installation-id.txt file
touch $ROOTFS/target/etc/installation-id.txt
DIST=$(lsb_release -c | tail -1 | sed -e 's/:/\n/g' | tail -1 | sed -e 's/^[[:space:]]*//');
ARCH=$(uname -m);
UUID=$(uuidgen); 
echo "$DIST-$ARCH-$UUID" >> $ROOTFS/target/etc/installation-id.txt

##### Remove ISO Image ID from $ROOTFS/target/etc/lsb-release
set +e
LSB_DEVELOPMENT=`lsb_release -d | grep Development`
echo $LSB_DEVELOPMENT
if [ "x$LSB_DEVELOPMENT" != "x1" ];then
		LSB_DIST_ID=`cat $ROOTFS/target/etc/lsb-release | sed -n 2p | cut -d"=" -f2 | cut -d'-' -f2-3`
		LSB_DESC=`cat $ROOTFS/target/etc/lsb-release | sed -n 4p | cut -d"-" -f2 | cut -d"\"" -f2`
		sed -i "4s/.*/DISTRIB_DESCRIPTION=\"$LSB_DESC $LSB_DIST_ID\"/" $ROOTFS/target/etc/lsb-release
fi
set -e

LSB_RELEASE=`cat $ROOTFS/target/etc/lsb-release | sed -n 2p | cut -d"-" -f1`
sed -i "2s/.*/$LSB_RELEASE/" $ROOTFS/target/etc/lsb-release
