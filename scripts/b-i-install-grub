#!/bin/bash

set -e

# If this is an EFI system, this script will be called with two parameters,
# being the first is the installation device and the second is the EFI partition,
# otherwise, only first parameter is given

DEVICE=$1
EFI_PARTITION=$2
NEED_FORMAT=$3

if [ -z "$DEVICE" ];then
    echo "No device given"
    exit 1
fi

# We don't have PATH within script execution yet dpkg requires it
# So we set it here
export PATH=/bin:/usr/bin 

grep -v GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub > /tmp/grub
mv /tmp/grub /target/etc/default/grub
cat << @@EOF >> /target/etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="rw quiet splash"
GRUB_GFXPAYLOAD_LINUX=1024x768
@@EOF

if [ -z "$EFI_PARTITION" ];then
    /usr/sbin/grub-install --recheck --root-directory=/target $DEVICE
else
    # If EFI_PARTITION was a false, then the instaler.vala has create one. Find it.
    if [ "x$EFI_PARTITION" = "xfalse" ];then
        set +e
        EFI_PARTITION=`/sbin/fdisk -l $DEVICE 2> /dev/null | grep "EFI System" | cut -d" " -f1`
        set -e
    fi
    # grub-efi must be available 
    apt-get --assume-yes install grub-efi
    mkdir -p /target/boot/efi
    if [ "x$NEED_FORMAT" = "xY" ];then
       /sbin/mkfs.fat -F 32 $EFI_PARTITION
    fi
    mount $EFI_PARTITION /target/boot/efi
    /usr/sbin/grub-install --recheck --efi-directory=/target/boot/efi --root-directory=/target $DEVICE
    umount /target/boot/efi
fi
sudo chroot /target /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg 
